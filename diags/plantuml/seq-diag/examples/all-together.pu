@startuml
' ---------- SETUP ----------------
' strict uml style and hide footboxes
skinparam style strictuml
hide footbox
' for anchors and duration this may be required (uncomment)
' !pragma teoz true


' ---------- Declaring participants
participant Participant as Foo
actor       Actor       as Foo1
boundary    Boundary    as Foo2
control     Control     as Foo3
entity      Entity      as Foo4
database    Database    as Foo5
collections Collections as Foo6
queue       Queue       as Foo7
Foo -> Foo1 : To actor 
Foo -> Foo2 : To boundary
Foo -> Foo3 : To control
Foo -> Foo4 : To entity
Foo -> Foo5 : To database
Foo -> Foo6 : To collections
Foo -> Foo7: To queue

' -------- Grouping messages ------------------
' divider or separator
' Encompass actors
' add colors to cases
' add notes
== Initialization ==

box "Internal Service" #LightBlue
participant Bob
participant Alice
end box
Alice -> Bob: Authentication Request
alt#Gold #LightBlue Successful case
    Bob -> Alice: Authentication Accepted
    note left: this is a first note
else #Pink Failure
    Bob -> Alice: Authentication Rejected
    note right: this is a 2nd note
end

== Repetition ==

Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response


Alice -> Bob: Authentication Request

alt successful case

    Bob -> Alice: Authentication Accepted

else some kind of failure

    Bob -> Alice: Authentication Failure
    group My own label
    Alice -> Log : Log attack start
        loop 1000 times
            Alice -> Bob: DNS Attack
        end
    Alice -> Log : Log attack end
    end

else Another type of failure

   Bob -> Alice: Please repeat

' ---------- Anchors and duration
{start} Alice -> Bob : start doing things during duration
Bob -> Max : something
Max -> Bob : something else
{end} Bob -> Alice : finish

{start} <-> {end} : some time

' --------- Incoming and outgoing messages
[-> A: DoWork

activate A

A -> A: Internal call
activate A

A ->] : << createRequest >>

A<--] : RequestCreated
deactivate A
[<- A: Done
deactivate A

' -------  Participant creation ---------
Bob -> Alice : hello

create Other
Alice -> Other : new

create control String
Alice -> String
note right : You can also put notes!

Alice --> Bob : ok

'-------- Lifeline activation/deactivation
participant User

User -> A: DoWork
activate A

A -> B: << createRequest >>
activate B

B -> C: DoWork
activate C
C --> B: WorkDone
destroy C

B --> A: RequestCreated
deactivate B

A -> User: Done
deactivate A

@enduml